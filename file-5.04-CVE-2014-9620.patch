diff --git a/src/elfclass.h b/src/elfclass.h
index a3e3969..65adcac 100644
--- a/src/elfclass.h
+++ b/src/elfclass.h
@@ -32,6 +32,7 @@
 	swap = (u.c[sizeof(int32_t) - 1] + 1) != elfhdr.e_ident[EI_DATA];
 
 	type = elf_getu16(swap, elfhdr.e_type);
+	notecount = 256;
 	switch (type) {
 #ifdef ELFCORE
 	case ET_CORE:
@@ -42,7 +43,7 @@
 		if (dophn_core(ms, clazz, swap, fd,
 		    (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,
 		    (size_t)elf_getu16(swap, elfhdr.e_phentsize),
-		    fsize, &flags) == -1)
+		    fsize, &flags, &notecount) == -1)
 			return -1;
 		break;
 #endif
@@ -57,7 +58,7 @@
 		if (dophn_exec(ms, clazz, swap, fd,
 		    (off_t)elf_getu(swap, elfhdr.e_phoff), phnum,
 		    (size_t)elf_getu16(swap, elfhdr.e_phentsize),
-		    fsize, &flags, shnum) == -1)
+		    fsize, &flags, shnum, &notecount) == -1)
 			return -1;
 		/*FALLTHROUGH*/
 	case ET_REL:
@@ -67,11 +68,13 @@
 		if (doshn(ms, clazz, swap, fd,
 		    (off_t)elf_getu(swap, elfhdr.e_shoff), shnum,
 		    (size_t)elf_getu16(swap, elfhdr.e_shentsize),
-		    fsize, &flags, elf_getu16(swap, elfhdr.e_machine)) == -1)
+		    fsize, &flags, elf_getu16(swap, elfhdr.e_machine), &notecount) == -1)
 			return -1;
 		break;
 
 	default:
 		break;
 	}
+	if (notecount == 0)
+		return toomany(ms, "notes", 256);
 	return 1;
diff --git a/src/readelf.c b/src/readelf.c
index 8e31ff2..13eb5d9 100644
--- a/src/readelf.c
+++ b/src/readelf.c
@@ -45,14 +45,14 @@ FILE_RCSID("@(#)$File: readelf.c,v 1.83 2009/05/13 14:43:10 christos Exp $")
 
 #ifdef	ELFCORE
 private int dophn_core(struct magic_set *, int, int, int, off_t, int, size_t,
-    off_t, int *);
+    off_t, int *, uint16_t *);
 #endif
 private int dophn_exec(struct magic_set *, int, int, int, off_t, int, size_t,
-    off_t, int *, int);
+    off_t, int *, int, uint16_t *);
 private int doshn(struct magic_set *, int, int, int, off_t, int, size_t,
-    off_t, int *, int);
+    off_t, int *, int, uint16_t *);
 private size_t donote(struct magic_set *, void *, size_t, size_t, int,
-    int, size_t, int *, int, off_t, int, off_t);
+    int, size_t, int *, int, off_t, int, off_t, uint16_t *);
 
 #define	ELF_ALIGN(a)	((((a) + align - 1) / align) * align)
 
@@ -323,7 +323,7 @@ private const char os_style_names[][8] = {
 
 private int
 dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,
-    int num, size_t size, off_t fsize, int *flags)
+    int num, size_t size, off_t fsize, int *flags, uint16_t *notecount)
 {
 	Elf32_Phdr ph32;
 	Elf64_Phdr ph64;
@@ -381,7 +381,7 @@ dophn_core(struct magic_set *ms, int clazz, int swap, int fd, off_t off,
 				break;
 			offset = donote(ms, nbuf, offset, (size_t)bufsize,
 			    clazz, swap, 4, flags, fd, ph_off,
-			    ph_num, fsize);
+			    ph_num, fsize, notecount);
 			if (offset == 0)
 				break;
 
@@ -544,7 +544,7 @@ do_auxv_note(struct magic_set *ms, unsigned char *nbuf, uint32_t type,
 private size_t
 donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,
     int clazz, int swap, size_t align, int *flags,
-	int fd, off_t ph_off, int ph_num, off_t fsize)
+	int fd, off_t ph_off, int ph_num, off_t fsize, uint16_t *notecount)
 {
 	Elf32_Nhdr nh32;
 	Elf64_Nhdr nh64;
@@ -555,6 +555,10 @@ donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,
 	uint32_t namesz, descsz;
 	unsigned char *nbuf = CAST(unsigned char *, vbuf);
 
+	if (*notecount == 0)
+		return 0;
+	--*notecount;
+
 	if (xnh_sizeof + offset > size) {
 		/*
 		 * We're out of note headers.
@@ -1030,7 +1034,7 @@ static const cap_desc_t cap_desc_386[] = {
 
 private int
 doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,
-    size_t size, off_t fsize, int *flags, int mach)
+    size_t size, off_t fsize, int *flags, int mach, uint16_t *notecount)
 {
 	Elf32_Shdr sh32;
 	Elf64_Shdr sh64;
@@ -1101,7 +1105,7 @@ doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,
 					break;
 				noff = donote(ms, nbuf, (size_t)noff,
 				    (size_t)xsh_size, clazz, swap, 4,
-				    flags, 0, 0, 0, 0);
+				    flags, 0, 0, 0, 0, notecount);
 				if (noff == 0)
 					break;
 			}
@@ -1224,7 +1228,7 @@ doshn(struct magic_set *ms, int clazz, int swap, int fd, off_t off, int num,
  */
 private int
 dophn_exec(struct magic_set *ms, int clazz, int swap, int fd, off_t off,
-    int num, size_t size, off_t fsize, int *flags, int sh_num)
+    int num, size_t size, off_t fsize, int *flags, int sh_num, uint16_t *notecount)
 {
 	Elf32_Phdr ph32;
 	Elf64_Phdr ph64;
@@ -1301,7 +1305,7 @@ dophn_exec(struct magic_set *ms, int clazz, int swap, int fd, off_t off,
 					break;
 				offset = donote(ms, nbuf, offset,
 				    (size_t)bufsize, clazz, swap, align,
-				    flags, 0, 0, 0, 0);
+				    flags, 0, 0, 0, 0, notecount);
 				if (offset == 0)
 					break;
 			}
@@ -1332,7 +1336,7 @@ file_tryelf(struct magic_set *ms, int fd, const unsigned char *buf,
 	int flags = 0;
 	Elf32_Ehdr elf32hdr;
 	Elf64_Ehdr elf64hdr;
-	uint16_t type, phnum, shnum;
+	uint16_t type, phnum, shnum, notecount;
 
 	if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))
 		return 0;
